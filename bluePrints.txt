pragma solidity ^0.8.7;
// SPDX-License-Identifier: UNLICENSED
import "hardhat/console.sol";


contract bluePrintsRepository {
    
    struct bluePrint{
        uint UID;  
        uint256 timestamp;
        address owner;
        bytes32 hashValue;
        address[] authorizedAddresses;
        bytes32[] oldHashes;
        uint256[] oldTimestamps; 
        //mapping(bytes32 => uint256) oldBlueprintHashes;
    }
    

    bluePrint[]  bluePrints;

    mapping(bytes32 => uint256) public oldBlueprintHashes;

    function uploadNewBlueprintHash(uint UID, bytes32 hashValue, address[] memory authorizedAddresses) public returns(bluePrint[] memory)
    {
            bytes32[] memory emptyBytes32;
            uint256[] memory emptyUint256;
            bluePrint memory newBluePrint = bluePrint(UID, block.timestamp, msg.sender, hashValue, authorizedAddresses, emptyBytes32 , emptyUint256);
            bluePrints.push(newBluePrint);
            return bluePrints;
    }


    

    function updateBluePrintHash(UID, hashValue) public {
       
    }



    // function updateBluePrintHash(UID, hashValue){
    //         if(bluePrintRegistry[UID].authorizedAddresses[msg.sender])
    //         {
    //             oldBluePrintsHashes[bluePrintRegistry[UID].hashValue] = timestamp
    //             bluePrintRegistry[UID].hashValue = hashValue;
    //             bluePrintRegistry[UID].timestamp = timestamp;
    //         } else {
    //             return "You are not allowed to update";
    //         }
    // }
    




    // 3 input fields 
    // -name given by the user (name)
    // -upload document generated (hashedValue)
    // -authorized addressed given by the use (hashedValue)




     
}















 
    // function uploadNewBlueprintHash( UID , hashedValue, authorizedAddresses){  
    //     CREATE a new struct instance and save it in the array
    //     UID created on the client side
    //     timestamp => From smart contract's global scope
    //     owner msg.sender => From smart contract's global scope
        
    //     arrayOfOldHashes[] = emptyArray
    //     SAVE BluePrint struct instance in the array (Method)
    // }



    

    // struct bluePrint{
    //     -integer UID        
    //     -timestamp   
    //     -owner message.sender   => Uploader of the blueprint is the one that is the owner
    //     -hashValue of the blueprint
    //     -authorizedAddresses [0xd8F810824D59f025eBfd729cAa882Df3179B8c26, 0xE7C35A176c23B34Bce9CA6168FC970D41Ae7e50F] allowed to update the Hash value and change timestamp
    //     -mapping(hashValue => timestamp) public oldBluePrintsHashes;  
       
    // }









